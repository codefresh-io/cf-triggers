// Code generated by mockery v1.0.0
package model

import context "context"
import mock "github.com/stretchr/testify/mock"

// MockTriggerReaderWriter is an autogenerated mock type for the TriggerReaderWriter type
type MockTriggerReaderWriter struct {
	mock.Mock
}

// CreateTrigger provides a mock function with given fields: ctx, event, pipeline, filters
func (_m *MockTriggerReaderWriter) CreateTrigger(ctx context.Context, event string, pipeline string, filters map[string]string) error {
	ret := _m.Called(ctx, event, pipeline, filters)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, map[string]string) error); ok {
		r0 = rf(ctx, event, pipeline, filters)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteTrigger provides a mock function with given fields: ctx, event, pipeline
func (_m *MockTriggerReaderWriter) DeleteTrigger(ctx context.Context, event string, pipeline string) error {
	ret := _m.Called(ctx, event, pipeline)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, event, pipeline)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetEventTriggers provides a mock function with given fields: ctx, event
func (_m *MockTriggerReaderWriter) GetEventTriggers(ctx context.Context, event string) ([]Trigger, error) {
	ret := _m.Called(ctx, event)

	var r0 []Trigger
	if rf, ok := ret.Get(0).(func(context.Context, string) []Trigger); ok {
		r0 = rf(ctx, event)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]Trigger)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, event)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPipelineTriggers provides a mock function with given fields: ctx, pipeline, withEvent
func (_m *MockTriggerReaderWriter) GetPipelineTriggers(ctx context.Context, pipeline string, withEvent bool) ([]Trigger, error) {
	ret := _m.Called(ctx, pipeline, withEvent)

	var r0 []Trigger
	if rf, ok := ret.Get(0).(func(context.Context, string, bool) []Trigger); ok {
		r0 = rf(ctx, pipeline, withEvent)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]Trigger)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, bool) error); ok {
		r1 = rf(ctx, pipeline, withEvent)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTriggerPipelines provides a mock function with given fields: ctx, event, vars
func (_m *MockTriggerReaderWriter) GetTriggerPipelines(ctx context.Context, event string, vars map[string]string) ([]string, error) {
	ret := _m.Called(ctx, event, vars)

	var r0 []string
	if rf, ok := ret.Get(0).(func(context.Context, string, map[string]string) []string); ok {
		r0 = rf(ctx, event, vars)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, map[string]string) error); ok {
		r1 = rf(ctx, event, vars)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

func (_m *MockTriggerReaderWriter) DeleteAllTriggersByPipeline(ctx context.Context, pipeline string) error {
	triggers, err := _m.GetPipelineTriggers(ctx, pipeline, true)

	if err != nil {
		return err
	}

	for _, trigger := range triggers {
		err = _m.DeleteTrigger(ctx, trigger.Event, pipeline)
		if err != nil {
			return err
		}
	}

	return nil
}
