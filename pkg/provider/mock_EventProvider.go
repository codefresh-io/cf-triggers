// Code generated by mockery v1.0.0
package provider

import context "context"
import mock "github.com/stretchr/testify/mock"
import model "github.com/codefresh-io/hermes/pkg/model"

// MockEventProvider is an autogenerated mock type for the EventProvider type
type MockEventProvider struct {
	mock.Mock
}

// ConstructEventURI provides a mock function with given fields: t, k, a, values
func (_m *MockEventProvider) ConstructEventURI(t string, k string, a string, values map[string]string) (string, error) {
	ret := _m.Called(t, k, a, values)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, string, string, map[string]string) string); ok {
		r0 = rf(t, k, a, values)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string, map[string]string) error); ok {
		r1 = rf(t, k, a, values)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetEventInfo provides a mock function with given fields: ctx, eventURI, secret
func (_m *MockEventProvider) GetEventInfo(ctx context.Context, eventURI string, secret string) (*model.EventInfo, error) {
	ret := _m.Called(ctx, eventURI, secret)

	var r0 *model.EventInfo
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *model.EventInfo); ok {
		r0 = rf(ctx, eventURI, secret)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.EventInfo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, eventURI, secret)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetType provides a mock function with given fields: t, k
func (_m *MockEventProvider) GetType(t string, k string) (*model.EventType, error) {
	ret := _m.Called(t, k)

	var r0 *model.EventType
	if rf, ok := ret.Get(0).(func(string, string) *model.EventType); ok {
		r0 = rf(t, k)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.EventType)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(t, k)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTypes provides a mock function with given fields:
func (_m *MockEventProvider) GetTypes() []model.EventType {
	ret := _m.Called()

	var r0 []model.EventType
	if rf, ok := ret.Get(0).(func() []model.EventType); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.EventType)
		}
	}

	return r0
}

// MatchType provides a mock function with given fields: eventURI
func (_m *MockEventProvider) MatchType(eventURI string) (*model.EventType, error) {
	ret := _m.Called(eventURI)

	var r0 *model.EventType
	if rf, ok := ret.Get(0).(func(string) *model.EventType); ok {
		r0 = rf(eventURI)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.EventType)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(eventURI)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SubscribeToEvent provides a mock function with given fields: ctx, eventURI, secret, actions, credentials
func (_m *MockEventProvider) SubscribeToEvent(ctx context.Context, eventURI string, secret string, actions []string, credentials map[string]interface{}) (*model.EventInfo, error) {
	ret := _m.Called(ctx, eventURI, secret, actions, credentials)

	var r0 *model.EventInfo
	if rf, ok := ret.Get(0).(func(context.Context, string, string, []string, map[string]interface{}) *model.EventInfo); ok {
		r0 = rf(ctx, eventURI, secret, actions, credentials)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.EventInfo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, []string, map[string]interface{}) error); ok {
		r1 = rf(ctx, eventURI, secret, actions, credentials)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UnsubscribeFromEvent provides a mock function with given fields: ctx, eventURI, credentials
func (_m *MockEventProvider) UnsubscribeFromEvent(ctx context.Context, eventURI string, credentials map[string]interface{}) error {
	ret := _m.Called(ctx, eventURI, credentials)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, map[string]interface{}) error); ok {
		r0 = rf(ctx, eventURI, credentials)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
