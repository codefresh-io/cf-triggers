// Code generated by mockery v1.0.0
package provider

import context "context"
import mock "github.com/stretchr/testify/mock"
import model "github.com/codefresh-io/hermes/pkg/model"

// MockEventProviderService is an autogenerated mock type for the EventProviderService type
type MockEventProviderService struct {
	mock.Mock
}

// GetEventInfo provides a mock function with given fields: ctx, event, secret
func (_m *MockEventProviderService) GetEventInfo(ctx context.Context, event string, secret string) (*model.EventInfo, error) {
	ret := _m.Called(ctx, event, secret)

	var r0 *model.EventInfo
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *model.EventInfo); ok {
		r0 = rf(ctx, event, secret)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.EventInfo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, event, secret)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SubscribeToEvent provides a mock function with given fields: ctx, eventURI, eventType, eventKind, secret, actions, values, credentials
func (_m *MockEventProviderService) SubscribeToEvent(ctx context.Context, eventURI string, eventType string, eventKind string, secret string, actions []string, values map[string]string, credentials map[string]interface{}) (*model.EventInfo, error) {
	ret := _m.Called(ctx, eventURI, eventType, eventKind, secret, actions, values, credentials)

	var r0 *model.EventInfo
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string, []string, map[string]string, map[string]interface{}) *model.EventInfo); ok {
		r0 = rf(ctx, eventURI, eventType, eventKind, secret, actions, values, credentials)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.EventInfo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, string, []string, map[string]string, map[string]interface{}) error); ok {
		r1 = rf(ctx, eventURI, eventType, eventKind, secret, actions, values, credentials)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UnsubscribeFromEvent provides a mock function with given fields: ctx, eventURI, eventType, eventKind, values, credentials
func (_m *MockEventProviderService) UnsubscribeFromEvent(ctx context.Context, eventURI string, eventType string, eventKind string, values map[string]string, credentials map[string]interface{}) error {
	ret := _m.Called(ctx, eventURI, eventType, eventKind, values, credentials)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, map[string]string, map[string]interface{}) error); ok {
		r0 = rf(ctx, eventURI, eventType, eventKind, values, credentials)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
