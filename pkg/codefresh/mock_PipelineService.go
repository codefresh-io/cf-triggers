// Code generated by mockery v1.0.0
package codefresh

import context "context"
import mock "github.com/stretchr/testify/mock"
import model "github.com/codefresh-io/hermes/pkg/model"

// MockPipelineService is an autogenerated mock type for the PipelineService type
type MockPipelineService struct {
	mock.Mock
}

// GetPipeline provides a mock function with given fields: ctx, account, id
func (_m *MockPipelineService) GetPipeline(ctx context.Context, account string, id string) (*Pipeline, error) {
	ret := _m.Called(ctx, account, id)

	var r0 *Pipeline
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *Pipeline); ok {
		r0 = rf(ctx, account, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Pipeline)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, account, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Ping provides a mock function with given fields:
func (_m *MockPipelineService) Ping() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PublishEvent provides a mock function with given fields: ctx, account, eventURI, event
func (_m *MockPipelineService) PublishEvent(ctx context.Context, account string, eventURI string, event model.NormalizedEvent) error {
	ret := _m.Called(ctx, account, eventURI, event)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, model.NormalizedEvent) error); ok {
		r0 = rf(ctx, account, eventURI, event)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RunPipeline provides a mock function with given fields: accountID, id, vars, event
func (_m *MockPipelineService) RunPipeline(accountID string, id string, vars map[string]string, event model.NormalizedEvent) (string, error) {
	ret := _m.Called(accountID, id, vars, event)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, string, map[string]string, model.NormalizedEvent) string); ok {
		r0 = rf(accountID, id, vars, event)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, map[string]string, model.NormalizedEvent) error); ok {
		r1 = rf(accountID, id, vars, event)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
